// My .conkerorrc
// Björn Edström <be@bjrn.se>


homepage = 'http://www.google.com/';


// And god said, let there be light.
editor_shell_command = "emacs";


// Make sure 'q' doesn't accidentally shut down the program.
can_kill_last_buffer = false;


// Some new keybindings
undefine_key(content_buffer_normal_keymap, "b");
undefine_key(content_buffer_normal_keymap, "B");

define_key(content_buffer_normal_keymap, "b", "back");
define_key(content_buffer_normal_keymap, "B", "bookmark");


// testing...
download_buffer_automatic_open_target = [OPEN_NEW_BUFFER_BACKGROUND, OPEN_NEW_WINDOW];
require("new-tabs.js");


// session handling
require("session.js");
define_key(content_buffer_normal_keymap, "C-x F", "session-load-window-current");
define_key(content_buffer_normal_keymap, "C-x S", "session-save");


// webjumps
define_webjump("imdb", "http://imdb.com/find?q=%s");
define_webjump("gmail", "http://gmail.com/");


// display properties of the current selected node during
// the hints interaction.
hints_display_url_panel = true;


// default directory for downloads and shell commands.
cwd = get_home_directory();
cwd.append("Downloads");


// view source in your editor.
view_source_use_external_editor = true;


// Attempt to block focus stealing. (1).
require("block-content-focus-change.js");


// Attempt to block focus stealing. (2). DISABLED
function focusblock (buffer) {
    var s = Components.utils.Sandbox(buffer.top_frame);
    s.document = buffer.document.wrappedJSObject;
    Components.utils.evalInSandbox(
        "(function () {\
            function nothing () {}\
            if (! document.forms)\
                return;\
            for (var i = 0, nforms = document.forms.length; i < nforms; i++) {\
              for (var j = 0, nels = document.forms[i].elements.length; j < nels; j++)\
                document.forms[i].elements[j].focus = nothing;\
            }\
          })();",
        s);
}
//add_hook('content_buffer_progress_change_hook', focusblock);


// Prevent conkeror from closing by mistake
// XXX: Why doesn't this work?
add_hook("window_before_close_hook",
         function (w) {
             var result = yield w.minibuffer.read_single_character_option(
                 $prompt = "Close window? (y/n)",
                 $options = ["y", "n"]);
             yield co_return(result == "y");
         });


// Integrate with org-capture and org-store-link.
// Requires emacs --daemon.
function org_store_link (url, title, window) {
    var cmd_str = 'emacsclient \"org-protocol://store-link://'+url+'/'+title+'\"';
    if (window != null) {
      window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-store-link", "Stores [[url][title]] as org link and copies url to emacs kill ring",
          function (I) {
              org_store_link(encodeURIComponent(I.buffer.display_uri_string), encodeURIComponent(I.buffer.document.title), I.window);
          });

function org_capture (url, title, selection, window) {
    var cmd_str = 'emacsclient \"org-protocol://capture://'+url+'/'+title+'/'+selection+'\"';
    if (window != null) {
      window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-capture", "Clip url, title, and selection to capture via org-protocol",
          function (I) {
              org_capture(encodeURIComponent(I.buffer.display_uri_string), encodeURIComponent(I.buffer.document.title), encodeURIComponent(I.buffer.top_frame.getSelection()), I.window);
          });

define_key(content_buffer_normal_keymap, "C-c c", "org-capture");
define_key(content_buffer_normal_keymap, "C-c l", "org-store-link");


// Bind 'z' to readability.
interactive("readability_arc90",
            "Readability is a simple tool that makes reading on the web more enjoyable by removing the clutter around what you are reading",
            function readability_arc90(I) {
                var document = I.window.buffers.current.document;

                var readConvertLinksToFootnotes = false;
                var readStyle = 'style-novel';
                var readSize = 'size-medium';
                var readMargin = 'margin-wide';

                var _readability_readStyle = document.createElement('SCRIPT');
                _readability_readStyle.text = 'var readStyle = \'' + readStyle + '\';';
                document.getElementsByTagName('head')[0].appendChild(_readability_readStyle);

                var _readability_readSize = document.createElement('SCRIPT');
                _readability_readSize.text = 'var readSize = \'' + readSize + '\';';
                document.getElementsByTagName('head')[0].appendChild(_readability_readSize);

                var _readability_readMargin = document.createElement('SCRIPT');
                _readability_readMargin.text = 'var readMargin = \'' + readMargin + '\';';
                document.getElementsByTagName('head')[0].appendChild(_readability_readMargin);

                var _readability_readConvertLinksToFootnotes = document.createElement('SCRIPT');
                _readability_readConvertLinksToFootnotes.text = 'var readConvertLinksToFootnotes = ' + readConvertLinksToFootnotes + ';';
                document.getElementsByTagName('head')[0].appendChild(_readability_readConvertLinksToFootnotes);

                var _readability_script = document.createElement('script')
                _readability_script.type='text/javascript'
                _readability_script.src='http://lab.arc90.com/experiments/readability/js/readability.js?x='+(Math.random())
                document.documentElement.appendChild(_readability_script)

                var _readability_css = document.createElement('link')
                _readability_css.rel = 'stylesheet'
                _readability_css.href = 'http://lab.arc90.com/experiments/readability/css/readability.css'
                _readability_css.type = 'text/css'
                _readability_css.media = 'all'
                document.documentElement.appendChild(_readability_css)

                var _readability_print_css = document.createElement('link')
                _readability_print_css.rel = 'stylesheet'
                _readability_print_css.href = 'http://lab.arc90.com/experiments/readability/css/readability-print.css'
                _readability_print_css.media = 'print'
                _readability_print_css.type = 'text/css'
                document.getElementsByTagName('head')[0].appendChild(_readability_print_css)
            });

define_key(content_buffer_normal_keymap, "z", "readability_arc90");


interactive("list-bookmarks",
    "List all bookmarks",
    function (I) {
        var data = "", error = "";
        var result = yield shell_command(
            "/home/bjorn/src/conkeror-bookmarks/conkeror-bookmarks.py --html",
            $fds = [{ output: async_binary_string_writer("") },
                    { input: async_binary_reader(function (s) data+=s||"") },
                    { input: async_binary_reader(function (s) error+=s||"") }]);
        if (result != 0 || error != "")
            throw new interactive_error("status "+result+", "+error);
        var uri = "data:text/html;charset=utf-8;base64,"+btoa(data);
        browser_object_follow(I.buffer, OPEN_NEW_BUFFER, load_spec({ uri: uri }));
    });




require("cookie.js"); // hopefully this would go in modules/cookie.js so this would not be needed

function for_each_host_cookie(host, fn) {
    var cookies = cookie_manager.getCookiesFromHost(host);
    while (cookies.hasMoreElements()) {
        var cookie = cookies.getNext().QueryInterface(Components.interfaces.nsICookie2);
        fn(cookie);
    }
}

function clear_host_cookies(host) {
    for_each_host_cookie(host,
                         function (cookie) {
                             cookie_manager.remove(cookie.host, cookie.name, cookie.path, false);
                         });
}

interactive("clear-site-cookies", "Delete all cookies for the current site",
            function (I) {
                var host = I.buffer.current_uri.host;
                clear_host_cookies(host);
                I.minibuffer.message("Cookies cleared for " + host);
            });
